module screen_controller(pipe_in, bird_in, switch, red_out, green_out, clk, reset);
	input logic switch, clk, reset;
	input logic [15:0] bird_in;
	input logic [15:0][15:0] pipe_in;
	output logic [15:0][15:0] red_out, green_out;
	
	enum {off, start, game, gameover} ps, ns;
	
	// next state logic
	always_comb begin
		case(ps)
			off: ns = start;
			start: if (switch) ns = game;
					 else ns = start;
			game: if (switch) ns = over;
					else ns = game;
			over: if (switch) ns = start;
					else ns = over;
		endcase
	end
	
	//red output logic
	always_comb begin
		case(ps)
			game: red_out[2][15:0] = bird_in;
			over: red_out = 
			default: red_out = '0;
		endcase
	end
	
	//green output logic
	always_comb begin
		case(ps)
			game: green_out = pipe_in;
			start: green_out = 
			default: green_out = '0;
		endcase
	end
	
	//DFF
	always_ff @(posedge clk) begin
		if (reset)
			ps <= off;
		else
			ps <= ns;
	end
endmodule 